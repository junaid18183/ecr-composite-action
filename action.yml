name: "Hello World"
description: "Greet someone"
inputs:
  k8s_namespace:
    description: "Kubernetes Namespace"
    required: true
    default: "demo"
  image_name:
    description: "ImageName"
    required: true
  context:
    description: "Context"
    required: true
  aws-access-key-id:
    description: "aws-access-key-id"
    required: true
  aws-secret-access-key:
    description: "aws-secret-access-key"
    required: true
  aws-region:
    description: "aws-region"
    required: true
# outputs:
#   trivy_scan:
#     description: "Trivy Scan result"
#     value: ${{ steps.trivy.outputs.random-number }}
runs:
  using: "composite"
  steps:
    - name: Set Env Vars (default)
      shell: bash
      run: |
        REPOSITORY_NAME=${GITHUB_REPOSITORY#*\/}
        GIT_BRANCH=${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}}
        echo "REPOSITORY_NAME=${REPOSITORY_NAME//_/-}" >> $GITHUB_ENV
        echo "IMAGE_NAME=${{ env.REPOSITORY_NAME }}-dev-${{ inputs.image_name }}" >> $GITHUB_ENV
        echo "K8S_NAMESPACE=${{ inputs.namespace}}-dev" >> $GITHUB_ENV
        echo "EKS_CLUSTER_NAME=${REPOSITORY_NAME//_/-}-dev" >> $GITHUB_ENV
        echo "TAG=sha-${GITHUB_SHA::7}" >> $GITHUB_ENV

    - name: Set env vars (dev)
      if: endsWith(github.ref, '/dev')
      shell: bash
      run: |
        echo "IMAGE_NAME=${{ env.REPOSITORY_NAME }}-dev-${{ inputs.image_name }}" >> $GITHUB_ENV
        echo "K8S_NAMESPACE=${{ inputs.namespace}}-dev" >> $GITHUB_ENV
        echo "EKS_CLUSTER_NAME=${REPOSITORY_NAME//_/-}-dev" >> $GITHUB_ENV

    - name: Set env vars (qa)
      if: endsWith(github.ref, '/qa')
      shell: bash
      run: |
        echo "IMAGE_NAME=${{ env.REPOSITORY_NAME }}-qa-${{ inputs.image_name }}" >> $GITHUB_ENV
        echo "K8S_NAMESPACE=${{ inputs.namespace}}-qa" >> $GITHUB_ENV
        echo "EKS_CLUSTER_NAME=${REPOSITORY_NAME//_/-}-qa" >> $GITHUB_ENV

    - name: Set env vars (relese)
      if: endsWith(github.ref, '/release*')
      shell: bash
      run: |
        echo "IMAGE_NAME=${{ env.REPOSITORY_NAME }}-qa-${{ inputs.image_name }}" >> $GITHUB_ENV
        echo "K8S_NAMESPACE=${{ inputs.namespace}}-qa" >> $GITHUB_ENV
        echo "EKS_CLUSTER_NAME=${REPOSITORY_NAME//_/-}-qa" >> $GITHUB_ENV

    - name: Set env vars (prod)
      if: endsWith(github.ref, '/main')
      shell: bash
      run: |
        echo "IMAGE_NAME=${{ env.REPOSITORY_NAME }}-prod-${{ inputs.image_name }}" >> $GITHUB_ENV
        echo "K8S_NAMESPACE=${{ inputs.namespace}}-prod" >> $GITHUB_ENV
        echo "EKS_CLUSTER_NAME=${REPOSITORY_NAME//_/-}-prod" >> $GITHUB_ENV

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Extract Docker metadata for ${{ inputs.image_name }}
      id: image_meta
      uses: docker/metadata-action@v4
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=sha
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}-snapshot
          type=raw,value=latest

    - name: Build and Push Webscarper Image
      id: build_and_push_image
      uses: docker/build-push-action@v3
      with:
        context: ${{ inputs.context }}
        platforms: linux/amd64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.image_meta.outputs.tags }}
        labels: ${{ steps.image_meta.outputs.labels }}

    - name: SBOM
      uses: anchore/sbom-action@v0
      if: github.event_name != 'pull_request'
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        artifact-name: ${{ github.sha }}-${{ inputs.image_name }}_sbom.json

    - name: Run Trivy Vulnerability Scanner
      id: trivy
      uses: aquasecurity/trivy-action@master
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: "table"
        exit-code: "1"
        ignore-unfixed: true
        vuln-type: "os,library"
        severity: "CRITICAL,HIGH"
